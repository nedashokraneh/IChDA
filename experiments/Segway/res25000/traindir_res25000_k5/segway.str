#include "traindir_res25000_k5/auxiliary/segway.inc"

GRAPHICAL_MODEL model_seg

frame: 0 {
   variable: segCountDown {
      type: TYPE_SEGCOUNTDOWN;
      conditionalparents: seg(0) using DeterministicCPT("seg_segCountDown");
   }

   variable: seg {
      type: TYPE_SEG;
      conditionalparents: nil using DenseCPT("start_seg");
   }

#if CARD_SUBSEG > 1
   variable: subseg {
      type: TYPE_SUBSEG;
      conditionalparents: seg(0) using DenseCPT("seg_subseg");
   }
#endif

#ifndef USE_MFSDG
   variable: presence__DNase {
      type: discrete observed 12:12 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: DNase {
      type: continuous observed 0:0;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_DNase")
                          MAPPING_OBS;
#else
      switchingparents: presence__DNase(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_DNase") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K4me2 {
      type: discrete observed 13:13 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K4me2 {
      type: continuous observed 1:1;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K4me2")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K4me2(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K4me2") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K27ac {
      type: discrete observed 14:14 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K27ac {
      type: continuous observed 2:2;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K27ac")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K27ac(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K27ac") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H2A_2EZ {
      type: discrete observed 15:15 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H2A_2EZ {
      type: continuous observed 3:3;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H2A_2EZ")
                          MAPPING_OBS;
#else
      switchingparents: presence__H2A_2EZ(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H2A_2EZ") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K9me3 {
      type: discrete observed 16:16 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K9me3 {
      type: continuous observed 4:4;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K9me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K9me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K9me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K4me1 {
      type: discrete observed 17:17 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K4me1 {
      type: continuous observed 5:5;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K4me1")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K4me1(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K4me1") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K27me3 {
      type: discrete observed 18:18 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K27me3 {
      type: continuous observed 6:6;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K27me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K27me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K27me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K9ac {
      type: discrete observed 19:19 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K9ac {
      type: continuous observed 7:7;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K9ac")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K9ac(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K9ac") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K4me3 {
      type: discrete observed 20:20 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K4me3 {
      type: continuous observed 8:8;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K4me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K4me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K4me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K36me3 {
      type: discrete observed 21:21 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K36me3 {
      type: continuous observed 9:9;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K36me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K36me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K36me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K79me2 {
      type: discrete observed 22:22 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K79me2 {
      type: continuous observed 10:10;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K79me2")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K79me2(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K79me2") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H4K20me1 {
      type: discrete observed 23:23 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H4K20me1 {
      type: continuous observed 11:11;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H4K20me1")
                          MAPPING_OBS;
#else
      switchingparents: presence__H4K20me1(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H4K20me1") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifdef VIRTUAL_EVIDENCE
   variable: virtualEvidence {
       type: discrete observed value 1 cardinality CARD_BOOLEAN;

       switchingparents: presence__virtualEvidence(0) using mapping("internal:copyParent");

       conditionalparents: seg(0) using VirtualEvidenceCPT("seg_virtualEvidence") | seg(0) using VirtualEvidenceCPT("seg_virtualEvidence");

       weight: scale 1.000000;
   }

   variable: presence__virtualEvidence {
     type: discrete observed 24:24 cardinality CARD_PRESENCE;

     conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif /* VIRTUAL_EVIDENCE==1 */

}

frame: 1 {
   variable: frameIndex {
      type: discrete observed value frameNum cardinality CARD_FRAMEINDEX;
      conditionalparents: CONDITIONALPARENTS_NIL_DISCRETE;
   }

   variable: ruler {
      type: discrete hidden cardinality CARD_RULER;
      conditionalparents: frameIndex(0) using DeterministicCPT("frameIndex_ruler");
   }

   variable: segCountDown {
      type: TYPE_SEGCOUNTDOWN;
      conditionalparents: segTransition(0), ruler(0), seg(0), segCountDown(-1)
                          using DeterministicCPT("segTransition_ruler_seg_segCountDown_segCountDown");
   }

   variable: segTransition {
      type: discrete hidden cardinality CARD_SEGTRANSITION;
      conditionalparents: segCountDown(-1), seg(-1) using DenseCPT("segCountDown_seg_segTransition");
      weight: scale SEGTRANSITION_WEIGHT_SCALE;
   }

   variable: seg {
      type: TYPE_SEG;
      conditionalparents: seg(-1) using DeterministicCPT("seg_seg_copy")
                          | seg(-1) using DeterministicCPT("seg_seg_copy")
                          | seg(-1) using DenseCPT("seg_seg");
      switchingparents: segTransition(0) using mapping("internal:copyParent");
   }

#if CARD_SUBSEG > 1
   variable: subseg {
      type: TYPE_SUBSEG;
      conditionalparents: subseg(-1) using DeterministicCPT("subseg_subseg_copy")
                          | seg(0), subseg(-1) using DenseCPT("seg_subseg_subseg")
                          | seg(0) using DenseCPT("seg_subseg");
      switchingparents: segTransition(0) using mapping("internal:copyParent");
   }
#endif

#ifndef USE_MFSDG
   variable: presence__DNase {
      type: discrete observed 12:12 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: DNase {
      type: continuous observed 0:0;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_DNase")
                          MAPPING_OBS;
#else
      switchingparents: presence__DNase(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_DNase") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K4me2 {
      type: discrete observed 13:13 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K4me2 {
      type: continuous observed 1:1;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K4me2")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K4me2(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K4me2") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K27ac {
      type: discrete observed 14:14 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K27ac {
      type: continuous observed 2:2;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K27ac")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K27ac(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K27ac") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H2A_2EZ {
      type: discrete observed 15:15 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H2A_2EZ {
      type: continuous observed 3:3;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H2A_2EZ")
                          MAPPING_OBS;
#else
      switchingparents: presence__H2A_2EZ(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H2A_2EZ") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K9me3 {
      type: discrete observed 16:16 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K9me3 {
      type: continuous observed 4:4;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K9me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K9me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K9me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K4me1 {
      type: discrete observed 17:17 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K4me1 {
      type: continuous observed 5:5;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K4me1")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K4me1(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K4me1") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K27me3 {
      type: discrete observed 18:18 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K27me3 {
      type: continuous observed 6:6;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K27me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K27me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K27me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K9ac {
      type: discrete observed 19:19 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K9ac {
      type: continuous observed 7:7;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K9ac")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K9ac(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K9ac") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K4me3 {
      type: discrete observed 20:20 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K4me3 {
      type: continuous observed 8:8;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K4me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K4me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K4me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K36me3 {
      type: discrete observed 21:21 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K36me3 {
      type: continuous observed 9:9;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K36me3")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K36me3(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K36me3") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H3K79me2 {
      type: discrete observed 22:22 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H3K79me2 {
      type: continuous observed 10:10;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H3K79me2")
                          MAPPING_OBS;
#else
      switchingparents: presence__H3K79me2(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H3K79me2") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifndef USE_MFSDG
   variable: presence__H4K20me1 {
      type: discrete observed 23:23 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif

   variable: H4K20me1 {
      type: continuous observed 11:11;

#ifdef USE_MFSDG
      conditionalparents: CONDITIONALPARENTS_OBS
                          using mixture collection("collection_seg_H4K20me1")
                          MAPPING_OBS;
#else
      switchingparents: presence__H4K20me1(0) using mapping("internal:copyParent");

      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_H4K20me1") MAPPING_OBS;
#endif

      weight: scale 1.000000;
   }

#ifdef VIRTUAL_EVIDENCE
   variable: virtualEvidence {
       type: discrete observed value 1 cardinality CARD_BOOLEAN;

       switchingparents: presence__virtualEvidence(0) using mapping("internal:copyParent");

       conditionalparents: seg(0) using VirtualEvidenceCPT("seg_virtualEvidence") | seg(0) using VirtualEvidenceCPT("seg_virtualEvidence");

       weight: scale 1.000000;
   }

   variable: presence__virtualEvidence {
     type: discrete observed 24:24 cardinality CARD_PRESENCE;

     conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }
#endif /* VIRTUAL_EVIDENCE==1 */

}

chunk 1:1
